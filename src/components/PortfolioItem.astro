---
// src/components/PortfolioItem.astro
import Image from "astro/components/Image.astro";
// import type { Project, PublicProject, ProtectedProject } from "../lib/projects";

interface Props {
  id: string;
  title: string;
  description: string;
  tech: string[];
  role: string;
  demoUrl: string;
  url?: string;
  imageUrl: string;
  isProtected: boolean;
  index: number;
}

const {
  id,
  title,
  description,
  tech,
  role,
  demoUrl,
  imageUrl,
  url,
  index,
  isProtected,
} = Astro.props;
---

<div
  class="portfolio-wrapper"
  data-index={index}
  data-project-id={id}
  data-protected={isProtected}
>
  <button class="portfolio-item" style={`--delay: ${index * 0.2}s`}>
    <Image src={imageUrl} alt={title || ""} width="512" height="512" />
    <h3>{title}</h3>
  </button>

  <div class="modal-container">
    <div class="blur-overlay"></div>
    <div class="modal">
      <div class="modal-content">
        <button type="button" class="close-button" aria-label="Close modal">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>

        {
          isProtected ? (
            <div class="password-form">
              <h4>{title}</h4>
              <p>This project requires a password to view.</p>
              <div class="password-input-group">
                <input
                  type="password"
                  placeholder="Enter password"
                  class="password-input"
                />
                <button class="button primary verify-password">
                  View Project
                </button>
              </div>
              <p class="error-message" style="display: none;">
                Incorrect password
              </p>
            </div>
          ) : (
            <div
              class="project-details"
              style={isProtected ? "display: none" : ""}
            >
              <h2>{title}</h2>
              <p class="description">{description}</p>

              {tech && (
                <div class="tech-stack">
                  <h5>Technologies</h5>
                  <div class="tech-tags">
                    {tech.map((item) => (
                      <span class="tech-tag">{item}</span>
                    ))}
                  </div>
                </div>
              )}

              {role && (
                <div class="role">
                  <h5>Role</h5>
                  <p>{role}</p>
                </div>
              )}

              <video
                class="scroll"
                data-speed="1.5"
                src={demoUrl}
                autoplay
                loop
                muted
                playsinline
              >
                <source src={demoUrl} type="video/mp4" />
              </video>

              <div class="actions">
                {url && (
                  <a
                    href={url}
                    class="button secondary"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    View Project
                  </a>
                )}
              </div>
            </div>
          )
        }
      </div>
    </div>
  </div>
</div>

<style>
  .portfolio-item {
    border: 1px solid #8e8d8d;
    background-color: var(--background-color);
    border-radius: 16px;
    padding: 16px;
    text-align: center;
    text-decoration: none;
    color: inherit;
    opacity: 0;
    transform: translateX(100px);
    animation: slideIn 0.3s ease-out forwards;
    animation-delay: var(--delay, 0s);
  }

  .portfolio-item img {
    max-width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 12px;
  }

  .portfolio-item h3 {
    margin: 12px 0;
  }

  .modal-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 50;
  }

  .modal-container[data-active="true"] {
    display: flex;
  }

  .blur-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }

  .modal {
    position: relative;
    display: flex;
    width: 100vw;
    height: 100vh;
    background: var(--background-color);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    overflow: scroll;
    z-index: 9999;
    opacity: 0;
    transform: scale(0.95);
    transition: all 0.2s ease;
  }

  .modal-container[data-active="true"] .modal {
    opacity: 1;
    transform: scale(1);
  }

  .modal-content {
    /* max-height: 90vh;
    overflow-y: auto; */
    padding: 3rem;
    display: flex;
    position: relative;
    width: 100%;
    height: max-content;
    min-height: 100dvh;

    @media screen and (max-width: 768px) {
      padding: 3rem 0 3rem;
    }
  }
  .close-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    padding: 0.5rem;
    border-radius: 50%;
    border: none;
    background: none;
    cursor: pointer;
    line-height: 0;
    transition: background-color 0.2s ease;

    svg {
      stroke: var(--text-color);
    }
  }

  .close-button:hover {
    background-color: rgba(0, 0, 0, 0.1);
  }

  .password-form {
    text-align: center;
    align-self: center;
    margin: 0 auto;
  }

  .password-input-group {
    display: flex;
    gap: 0.5rem;
    margin: 1rem 0;
  }

  .password-input {
    flex: 1;
    padding: 0.5rem;
    border: 1px solid var(--text-color);
    border-radius: 0.5rem;
    background: var(--bg-color);
    color: var(--text-color);
  }

  .error-message {
    color: #dc2626;
    font-size: 0.875rem;
    margin-top: 0.5rem;
  }

  .project-details {
    position: relative;
    width: 75%;
    margin: 0 auto;

    @media screen and (max-width: 768px) {
      width: 100%;
    }
  }
  .tech-stack,
  .role {
    margin: 1.5rem 0;
  }

  .tech-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }

  .tech-tag {
    background: #8e8d8d;
    color: var(--bg-color);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
  }

  .actions {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
  }

  h2,
  .description,
  .tech-stack,
  .role,
  .actions {
    @media screen and (max-width: 768px) {
      padding: 0 3rem 0;
    }
  }

  video {
    width: 100%;
  }
</style>

<script>
  // Define interfaces for better type safety
  interface ModalContainer extends HTMLElement {
    setAttribute(name: string, value: string): void;
    querySelector<E extends Element = Element>(selectors: string): E | null;
    closest(selector: string): Element | null;
  }

  interface PasswordElements {
    projectDetails: HTMLElement | null;
    verifyButton: HTMLElement | null;
    passwordInput: HTMLInputElement | null;
    passwordForm: HTMLElement | null;
    errorMessage: HTMLElement | null;
  }

  interface ProjectResponse {
    title: string;
    description: string;
    tech: string[];
    role: string;
    demoUrl: string;
    url?: string;
    error?: string;
  }

  document.addEventListener("astro:page-load", () => {
    const portfolioItems =
      document.querySelectorAll<HTMLElement>(".portfolio-item");
    const modalContainers =
      document.querySelectorAll<ModalContainer>(".modal-container");

    function closeAllModals(): void {
      modalContainers.forEach((container) => {
        container.setAttribute("data-active", "false");
      });
      document.body.style.overflow = "";
    }

    async function fetchProjectData(
      projectId: string,
      password: string,
    ): Promise<ProjectResponse> {
      try {
        const response = await fetch(`/api/project/${projectId}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ password }),
        });

        // Get the response text first
        const responseText = await response.text();

        // Try to parse it as JSON
        let data;
        try {
          data = JSON.parse(responseText);
        } catch (e) {
          throw new Error("Invalid response format");
        }

        if (!response.ok) {
          console.error("Response not OK:", {
            status: response.status,
            statusText: response.statusText,
            data,
          });
          throw new Error(data.error || "Invalid password");
        }

        return data;
      } catch (error) {
        console.error("Error in fetchProjectData:", error);
        throw error;
      }
    }

    portfolioItems.forEach((item, index) => {
      const modalContainer = modalContainers[index];
      if (!modalContainer) return;

      const wrapper = modalContainer.closest(".portfolio-wrapper");
      const isProtected = wrapper?.hasAttribute("data-protected");
      const projectId = wrapper?.getAttribute("data-project-id") || "";

      // Open modal
      item.addEventListener("click", (e: Event) => {
        e.preventDefault();
        closeAllModals();
        modalContainer.setAttribute("data-active", "true");
        document.body.style.overflow = "hidden";
      });

      // Close on button click
      const closeButton =
        modalContainer.querySelector<HTMLElement>(".close-button");
      closeButton?.addEventListener("click", () => {
        closeAllModals();
      });

      const modalContent = modalContainer.querySelector('.modal-content')!;

      // Password verification
      if (isProtected) {
        const elements: PasswordElements = {
          projectDetails:
            modalContainer.querySelector<HTMLElement>(".project-details"),
          verifyButton:
            modalContainer.querySelector<HTMLElement>(".verify-password"),
          passwordInput:
            modalContainer.querySelector<HTMLInputElement>(".password-input"),
          passwordForm:
            modalContainer.querySelector<HTMLElement>(".password-form"),
          errorMessage:
            modalContainer.querySelector<HTMLElement>(".error-message"),
        };

        elements.verifyButton?.addEventListener("click", async () => {
          const password = elements.passwordInput?.value || "";
          try {
            const projectData = await fetchProjectData(projectId, password);

            if (elements.passwordForm) {
              elements.passwordForm.style.display = "none";
            }
            if (elements.projectDetails) {
              elements.projectDetails.style.display = "block";
            }
            if (elements.errorMessage) {
              elements.errorMessage.style.display = "none";
            }

            // Create the project details with the fetched data
            createProjectDetails(modalContent, projectData);
          } catch (error) {
            if (elements.errorMessage) {
              elements.errorMessage.style.display = "block";
            }
            if (elements.passwordInput) {
              elements.passwordInput.value = "";
            }
          }
        });

        // Allow enter key to submit password
        elements.passwordInput?.addEventListener(
          "keypress",
          (e: KeyboardEvent) => {
            if (e.key === "Enter") {
              elements.verifyButton?.click();
            }
          },
        );
      }
    });

    function createProjectDetails(container: Element, data: ProjectResponse) {
      // create container
      const details = document.createElement("div");
      details.classList.add("project-details");
      container.appendChild(details);

      const projectTitle = document.createElement("h2");
      projectTitle.textContent = data.title;
      details.appendChild(projectTitle);

      // create Description
      const descriptionEl = document.createElement("p");
      descriptionEl.classList.add("description");
      descriptionEl.textContent = data.description;
      details.appendChild(descriptionEl);

      // create Tech Stack
      const techStack = document.createElement("div");
      techStack.classList.add("tech-stack");

      const techHeading = document.createElement("h5");
      techHeading.textContent = "Technologies";
      techStack.appendChild(techHeading);

      const techTagsEl = document.createElement("p");
      techTagsEl.classList.add("tech-tags");
      techTagsEl.innerHTML = data.tech
        .map((tech) => `<span class="tech-tag">${tech}</span>`)
        .join("");

      techStack.appendChild(techTagsEl);
      details.appendChild(techStack);

      //create role
      const roleEl = document.createElement("div");
      const roleHeading = document.createElement("h5");
      roleHeading.textContent = "Role";
      roleEl.appendChild(roleHeading);
      const roleContent = document.createElement("p");
      roleContent.classList.add("role");
      roleContent.textContent = data.role;
      roleEl.appendChild(roleContent);
      details.appendChild(roleEl);

      const video = document.createElement("video");
      video.classList.add("scroll");
      video.setAttribute("data-speed", "1.5");
      video.setAttribute("src", data.demoUrl);
      video.setAttribute("autoplay", "true");
      video.setAttribute("loop", "true");
      video.setAttribute("muted", "true");
      video.setAttribute("playsInline", "true");

      const source = document.createElement("source");
      source.setAttribute("src", data.demoUrl);
      source.setAttribute("type", "video/mp4");
      video.appendChild(source);

      details.appendChild(video);

      if (data.url) {
        const actionEl = document.createElement('div');
        actionEl.classList.add('actions');
          actionEl.innerHTML = `
          <a href="${data.url}" class="button secondary" target="_blank" rel="noopener noreferrer">
            View Project
          </a>
        `;
        details.appendChild(actionEl);
      }
    }

    // Escape key handler
    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        closeAllModals();
      }
    });
  });
</script>
